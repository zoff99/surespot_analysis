
"pop entire message into gcm message if it's small enough":
===========================================================

        logger.debug "sending gcms for message"
        gcmmessage = new gcm.Message()
        logger.debug "gcm message created"
        sender = new gcm.Sender("#{googleApiKey}",  {maxSockets: MAX_GCM_SOCKETS})
        logger.debug "gcm sender created"
        gcmmessage.addData("type", "message")
        gcmmessage.addData("to", message.to)
        gcmmessage.addData("sentfrom", message.from)
        gcmmessage.addData("mimeType", message.mimeType)
        #pop entire message into gcm message if it's small enough
        if messagejson.length <= 3800
          gcmmessage.addData("message", messagejson)

        gcmmessage.delayWhileIdle = false
        gcmmessage.timeToLive = GCM_TTL

        logger.debug "gcm data set"

        logger.debug "sending push messages to: #{ids[0]}"
        sender.send gcmmessage, gcmIds, GCM_RETRIES, (err, result) ->
          return logger.error "Error sending message gcm from: #{message.from}, to: #{message.to}: #{err}" if err? or not result?
          logger.debug "sendGcm result: #{JSON.stringify(result)}"


password sent to server:
========================

  app.post "/keytoken", setNoCache, (req, res, next) ->
    return res.send 400 unless req.body?.username?
    return res.send 400 unless req.body?.authSig?
    return res.send 400 unless req.body?.password?

    username = req.body.username
    password = req.body.password
    authSig = req.body.authSig
    validateUser username, password, authSig, (err, status, user) ->
      return next err if err?
      return res.send 403 unless user?



and


  app.post "/keys", (req, res, next) ->
    logger.debug "/keys"
    return res.send 400 unless req.body?.username?
    return res.send 400 unless req.body?.authSig?
    return res.send 400 unless req.body?.password?

and


        logger.debug "received token signature: " + req.body.tokenSig
        logger.debug "received auth signature: " + req.body.authSig
        logger.debug "token: " + rtoken

        password = req.body.password

        #validate the signature against the token

        getLatestKeys username, (err, keys) ->
          return next err if err?
          return next new Error "no keys exist for user #{username}" unless keys?

          verified = verifySignature new Buffer(rtoken, 'base64'), new Buffer(password), req.body.tokenSig, keys.dsaPub
          return res.send 403 unless verified

          authSig = req.body.authSig
          validateUser username, password, authSig,(err, status, user) ->
            return next err if err?
            return res.send 403 unless user?


